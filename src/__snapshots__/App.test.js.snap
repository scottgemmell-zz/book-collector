// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<App /> renders 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Router
        history={
          Object {
            "action": "POP",
            "block": [Function],
            "createHref": [Function],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "length": 1,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
            "push": [Function],
            "replace": [Function],
          }
        }
      >
        <div>
          <header
            className="App-header"
          >
            <img
              alt="logo"
              className="App-logo"
              src="logo.svg"
            />
            <h1>
              <Link
                replace={false}
                to="/"
              >
                Books
              </Link>
            </h1>
          </header>
          <main>
            <ForwardRef(Bootstrap(Container))>
              <Switch>
                <Route
                  component={[Function]}
                  exact={true}
                  path="/"
                />
                <Route
                  component={[Function]}
                  path="/book/add/"
                />
                <Route
                  component={[Function]}
                  path="/book/edit/:id"
                />
                <Route
                  component={[Function]}
                  path="/book/view/:id"
                />
                <Route
                  component={[Function]}
                />
              </Switch>
            </ForwardRef(Bootstrap(Container))>
          </main>
        </div>
      </Router>,
      "className": "App",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <div>
          <header
            className="App-header"
          >
            <img
              alt="logo"
              className="App-logo"
              src="logo.svg"
            />
            <h1>
              <Link
                replace={false}
                to="/"
              >
                Books
              </Link>
            </h1>
          </header>
          <main>
            <ForwardRef(Bootstrap(Container))>
              <Switch>
                <Route
                  component={[Function]}
                  exact={true}
                  path="/"
                />
                <Route
                  component={[Function]}
                  path="/book/add/"
                />
                <Route
                  component={[Function]}
                  path="/book/edit/:id"
                />
                <Route
                  component={[Function]}
                  path="/book/view/:id"
                />
                <Route
                  component={[Function]}
                />
              </Switch>
            </ForwardRef(Bootstrap(Container))>
          </main>
        </div>,
        "history": Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <header
              className="App-header"
            >
              <img
                alt="logo"
                className="App-logo"
                src="logo.svg"
              />
              <h1>
                <Link
                  replace={false}
                  to="/"
                >
                  Books
                </Link>
              </h1>
            </header>,
            <main>
              <ForwardRef(Bootstrap(Container))>
                <Switch>
                  <Route
                    component={[Function]}
                    exact={true}
                    path="/"
                  />
                  <Route
                    component={[Function]}
                    path="/book/add/"
                  />
                  <Route
                    component={[Function]}
                    path="/book/edit/:id"
                  />
                  <Route
                    component={[Function]}
                    path="/book/view/:id"
                  />
                  <Route
                    component={[Function]}
                  />
                </Switch>
              </ForwardRef(Bootstrap(Container))>
            </main>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <img
                  alt="logo"
                  className="App-logo"
                  src="logo.svg"
                />,
                <h1>
                  <Link
                    replace={false}
                    to="/"
                  >
                    Books
                  </Link>
                </h1>,
              ],
              "className": "App-header",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "alt": "logo",
                  "className": "App-logo",
                  "src": "logo.svg",
                },
                "ref": null,
                "rendered": null,
                "type": "img",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Link
                    replace={false}
                    to="/"
                  >
                    Books
                  </Link>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Books",
                    "replace": false,
                    "to": "/",
                  },
                  "ref": null,
                  "rendered": "Books",
                  "type": [Function],
                },
                "type": "h1",
              },
            ],
            "type": "header",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <ForwardRef(Bootstrap(Container))>
                <Switch>
                  <Route
                    component={[Function]}
                    exact={true}
                    path="/"
                  />
                  <Route
                    component={[Function]}
                    path="/book/add/"
                  />
                  <Route
                    component={[Function]}
                    path="/book/edit/:id"
                  />
                  <Route
                    component={[Function]}
                    path="/book/view/:id"
                  />
                  <Route
                    component={[Function]}
                  />
                </Switch>
              </ForwardRef(Bootstrap(Container))>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <Switch>
                  <Route
                    component={[Function]}
                    exact={true}
                    path="/"
                  />
                  <Route
                    component={[Function]}
                    path="/book/add/"
                  />
                  <Route
                    component={[Function]}
                    path="/book/edit/:id"
                  />
                  <Route
                    component={[Function]}
                    path="/book/view/:id"
                  />
                  <Route
                    component={[Function]}
                  />
                </Switch>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/"
                    />,
                    <Route
                      component={[Function]}
                      path="/book/add/"
                    />,
                    <Route
                      component={[Function]}
                      path="/book/edit/:id"
                    />,
                    <Route
                      component={[Function]}
                      path="/book/view/:id"
                    />,
                    <Route
                      component={[Function]}
                    />,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "component": [Function],
                      "exact": true,
                      "path": "/",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "component": [Function],
                      "path": "/book/add/",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "component": [Function],
                      "path": "/book/edit/:id",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "component": [Function],
                      "path": "/book/view/:id",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "component": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "defaultProps": undefined,
                "propTypes": undefined,
                "render": [Function],
              },
            },
            "type": "main",
          },
        ],
        "type": "div",
      },
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Router
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "createHref": [Function],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
        >
          <div>
            <header
              className="App-header"
            >
              <img
                alt="logo"
                className="App-logo"
                src="logo.svg"
              />
              <h1>
                <Link
                  replace={false}
                  to="/"
                >
                  Books
                </Link>
              </h1>
            </header>
            <main>
              <ForwardRef(Bootstrap(Container))>
                <Switch>
                  <Route
                    component={[Function]}
                    exact={true}
                    path="/"
                  />
                  <Route
                    component={[Function]}
                    path="/book/add/"
                  />
                  <Route
                    component={[Function]}
                    path="/book/edit/:id"
                  />
                  <Route
                    component={[Function]}
                    path="/book/view/:id"
                  />
                  <Route
                    component={[Function]}
                  />
                </Switch>
              </ForwardRef(Bootstrap(Container))>
            </main>
          </div>
        </Router>,
        "className": "App",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <div>
            <header
              className="App-header"
            >
              <img
                alt="logo"
                className="App-logo"
                src="logo.svg"
              />
              <h1>
                <Link
                  replace={false}
                  to="/"
                >
                  Books
                </Link>
              </h1>
            </header>
            <main>
              <ForwardRef(Bootstrap(Container))>
                <Switch>
                  <Route
                    component={[Function]}
                    exact={true}
                    path="/"
                  />
                  <Route
                    component={[Function]}
                    path="/book/add/"
                  />
                  <Route
                    component={[Function]}
                    path="/book/edit/:id"
                  />
                  <Route
                    component={[Function]}
                    path="/book/view/:id"
                  />
                  <Route
                    component={[Function]}
                  />
                </Switch>
              </ForwardRef(Bootstrap(Container))>
            </main>
          </div>,
          "history": Object {
            "action": "POP",
            "block": [Function],
            "createHref": [Function],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "length": 1,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
            "push": [Function],
            "replace": [Function],
          },
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <header
                className="App-header"
              >
                <img
                  alt="logo"
                  className="App-logo"
                  src="logo.svg"
                />
                <h1>
                  <Link
                    replace={false}
                    to="/"
                  >
                    Books
                  </Link>
                </h1>
              </header>,
              <main>
                <ForwardRef(Bootstrap(Container))>
                  <Switch>
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/"
                    />
                    <Route
                      component={[Function]}
                      path="/book/add/"
                    />
                    <Route
                      component={[Function]}
                      path="/book/edit/:id"
                    />
                    <Route
                      component={[Function]}
                      path="/book/view/:id"
                    />
                    <Route
                      component={[Function]}
                    />
                  </Switch>
                </ForwardRef(Bootstrap(Container))>
              </main>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <img
                    alt="logo"
                    className="App-logo"
                    src="logo.svg"
                  />,
                  <h1>
                    <Link
                      replace={false}
                      to="/"
                    >
                      Books
                    </Link>
                  </h1>,
                ],
                "className": "App-header",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "alt": "logo",
                    "className": "App-logo",
                    "src": "logo.svg",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "img",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <Link
                      replace={false}
                      to="/"
                    >
                      Books
                    </Link>,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Books",
                      "replace": false,
                      "to": "/",
                    },
                    "ref": null,
                    "rendered": "Books",
                    "type": [Function],
                  },
                  "type": "h1",
                },
              ],
              "type": "header",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <ForwardRef(Bootstrap(Container))>
                  <Switch>
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/"
                    />
                    <Route
                      component={[Function]}
                      path="/book/add/"
                    />
                    <Route
                      component={[Function]}
                      path="/book/edit/:id"
                    />
                    <Route
                      component={[Function]}
                      path="/book/view/:id"
                    />
                    <Route
                      component={[Function]}
                    />
                  </Switch>
                </ForwardRef(Bootstrap(Container))>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <Switch>
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/"
                    />
                    <Route
                      component={[Function]}
                      path="/book/add/"
                    />
                    <Route
                      component={[Function]}
                      path="/book/edit/:id"
                    />
                    <Route
                      component={[Function]}
                      path="/book/view/:id"
                    />
                    <Route
                      component={[Function]}
                    />
                  </Switch>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <Route
                        component={[Function]}
                        exact={true}
                        path="/"
                      />,
                      <Route
                        component={[Function]}
                        path="/book/add/"
                      />,
                      <Route
                        component={[Function]}
                        path="/book/edit/:id"
                      />,
                      <Route
                        component={[Function]}
                        path="/book/view/:id"
                      />,
                      <Route
                        component={[Function]}
                      />,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "component": [Function],
                        "exact": true,
                        "path": "/",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "component": [Function],
                        "path": "/book/add/",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "component": [Function],
                        "path": "/book/edit/:id",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "component": [Function],
                        "path": "/book/view/:id",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "component": [Function],
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "defaultProps": undefined,
                  "propTypes": undefined,
                  "render": [Function],
                },
              },
              "type": "main",
            },
          ],
          "type": "div",
        },
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
